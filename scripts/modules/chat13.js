/* MODULE: chat13.js */
(function(global){
  const { $ } = global.UNO;
  const feed = $('#chatFeed'), input=$('#chatInput'), send=$('#chatSend');
  function sanitize(md){const esc=s=>s.replace(/[&<>]/g,m=>({'&':'&amp;','<':'&lt;','>':'&gt;'}[m])); md=md.replace(/\*\*(.+?)\*\*/g,'<strong>$1</strong>').replace(/\*(.+?)\*/g,'<em>$1</em>').replace(/`([^`]+?)`/g,'<code>$1</code>').replace(/\[(.+?)\]\((https?:\/\/[^\s)]+)\)/g,'<a href="$2" target="_blank" rel="noopener">$1</a>'); return md.split('\n').map(ln=>'<p>'+esc(ln)+'</p>').join('');}
  function push(role,title,html){const el=document.createElement('div'); el.className=`msg role-${role}`; el.innerHTML=(title?`<h5>${title}</h5>`:'')+(html||''); feed.appendChild(el); el.scrollIntoView({behavior:'smooth',block:'end'});}
  function pushBlock(title){const el=document.createElement('div'); el.className='msg role-assistant'; el.innerHTML=`<h5>${title}</h5><div class="mut">…</div>`; feed.appendChild(el); el.scrollIntoView({behavior:'smooth',block:'end'}); return el;}
  const BLOCKS=[["Sinal","Contextualize a intenção do usuário em 1 frase objetiva."],["Mapa","3-5 pontos-chave."],["Hipóteses","3 hipóteses testáveis."],["Dados","Dados mínimos a coletar."],["Ações 10min","Micro-ação em 10 minutos."],["Riscos","2 riscos/armadilhas."],["Recursos","3 recursos úteis."],["Sequência","4 passos ótimos."],["Expansão","2 variações criativas."],["Métrica","1 métrica simples."],["Checkpoint","Revisar em 24h."],["Compromisso","Compromisso curto."],["Fecho","Frase que mantenha o pulso."]];
  async function callOpenRouter(messages){const key=localStorage.getItem('dual.keys.openrouter')||''; const model=localStorage.getItem('dual.openrouter.model')||'openai/gpt-4o-mini'; if(!key) throw new Error('Chave OpenRouter ausente (defina em localStorage: dual.keys.openrouter)'); const r=await fetch('https://openrouter.ai/api/v1/chat/completions',{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${key}`,'HTTP-Referer':location.origin,'X-Title':'HUB UNO Chat13'},body:JSON.stringify({model, messages, temperature:0.7})}); if(!r.ok) throw new Error('OpenRouter HTTP '+r.status); const j=await r.json(); return j.choices?.[0]?.message?.content||'';}
  async function callLocal(messages){let ctx=messages.map(m=>(m.role+': '+m.content)).join('\n'); return `**Modo Offline (Local)**\nContexto:\n<code>${ctx.slice(-800)}</code>`;}
  async function pipeline(userText){const base=[{role:'system',content:'Você é o Chat13 do HUB UNO. Clareza e ação.'},{role:'user',content:userText}]; for(const [title,instr] of BLOCKS){const dom=pushBlock(title); try{const content=await callOpenRouter([...base,{role:'user',content:`Bloco: ${title}. Instrução: ${instr}. Curto, focado, com listas se útil.`}]).catch(async _=>await callLocal([...base,{role:'user',content:`[OFFLINE] ${title}: ${instr}`}]) ); dom.innerHTML=`<h5>${title}</h5>${sanitize(content)}`;}catch(e){dom.innerHTML=`<h5>${title}</h5><p class="mut">[erro: ${e.message}]</p>`;}}}
  send?.addEventListener('click', async ()=>{const text=(input.value||'').trim(); if(!text) return; push('user','Você',sanitize(text)); input.value=''; input.focus(); try{await pipeline(text);}catch(e){push('assistant','Erro',`<p class="mut">${e.message}</p>`);}});
  input?.addEventListener('keydown',e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();send.click();}});
  if(feed){push('assistant','Pronto','<p>Chat ativo. Escreva sua intenção.</p>');}
})(window);